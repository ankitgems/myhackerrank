str[[1]]
str[[1]][1]
class(str)
as.vector(str)
sapply(str,class)
str
class(str)
str<- sapply(str,class)
class(str)
str
n <- as.integer(readline())
grids <- data.frame(matrix(ncol = n,nrow = n))
grids
for (i in c(1:n))
{
str <- as.character(readline())
str <- as.vector(strsplit(str,''))
for(j in c(1:n)){
grids[i,j] <- str[[1]][j]
}
}
grids
?readChar
?index
??index
index
indexp <- apply(grids, c(1,2), function(x){which x == 'p'})
indexp <- apply(grids, c(1,2), function(x){which(x == 'p')})
indexp
class(integer)
class(indexp)
indexp <- grids[which(x == 'p')]
indexp <- which(apply(grids, c(1,2), function(x){which(x == 'p')}))
grepl(grids, 'p')
?grepl
grepl('p', grids)
grids
which(grids =='p')
grids == 'p'
?which
which(grids =='p', arr.ind = TRUE)
p <- which(grids =='p', arr.ind = TRUE)
m <- which(grids =='m', arr.ind = TRUE)
p[1]
p[1]-m[1]
m
p
m <- which(grids =='n', arr.ind = TRUE)
m
p - m
?rep
rep('sdf',3)
diff <- p - m
vert <- ifelse(diff[1] > 0, paste(rep('UP',diff[1]),paste(rep('DOWN',diff[1])))
)
?ifelse
paste(rep('D',3), sep = '\n')
paste(rep('D',3), sep = '')
d <- rep('D',3)
d
paste(d, sep='')
paste(d[1], sep='')
paste(d)
abs
'asdf'*abs(diff[1])
'asdf\n'
'asdf\\n'
'asdf/n'
paste(rep('D',3), collapse = '')
vert <- ifelse(diff[1] > 0, paste(rep('UP',diff[1]), collapse = ''), paste(rep('DOWN',diff[1]), collapse = ''))
vert <- ifelse(diff[1] > 0, paste(rep('UP',diff[1]), collapse = ''), paste(rep('DOWN',abs(diff[1])), collapse = ''))
verty
vert
vert <- ifelse(diff[1] > 0, paste(rep('UP',diff[1]), collapse = ''), paste(rep('DOWN',abs(diff[1])), collapse = ''))
horz <- ifelse(diff[1] > 0, paste(rep('RIGHT',diff[2]), collapse = ''), paste(rep('LEFT',abs(diff[2])), collapse = ''))
horz
paste(vert, horz)
n <- as.integer(readline())
grids <- data.frame(matrix(ncol = n,nrow = n))
for (i in c(1:n))
{
str <- as.character(readline())
str <- as.vector(strsplit(str,''))
for(j in c(1:n)){
grids[i,j] <- str[[1]][j]
}
}
p <- which(grids =='p', arr.ind = TRUE)
m <- which(grids =='m', arr.ind = TRUE)
diff <- p - m
vert <- ifelse(diff[1] > 0, paste(rep('UP\n',diff[1]), collapse = ''), paste(rep('DOWN\n',abs(diff[1])), collapse = ''))
horz <- ifelse(diff[1] > 0, paste(rep('RIGHT\n',diff[2]), collapse = ''), paste(rep('LEFT\n',abs(diff[2])), collapse = ''))
vert <- ifelse(diff[1] < 0, paste(rep('UP\n',diff[1]), collapse = ''), paste(rep('DOWN\n',abs(diff[1])), collapse = ''))
vert <- ifelse(diff[1] < 0, paste(rep('UP\n',abs(diff[1])), collapse = ''), paste(rep('DOWN\n',abs(diff[1])), collapse = ''))
horz <- ifelse(diff[1] > 0, paste(rep('RIGHT\n',diff[2]), collapse = ''), paste(rep('LEFT\n',abs(diff[2])), collapse = ''))
paste(vert, horz)
print(paste(vert, horz))
?stdout
write((paste(vert, horz)), stdout())
write((paste(vert, horz, collapse = '')), stdout())
write(horz, stdout())
write((paste(vert,horz, collapse = '',sep ='')), stdout())
n <- as.integer(readline(file('stdin')))
n <- as.integer(readline(file('stdin')))
open(file("stdin"))
open(file("stdin"))
n <- as.integer(readline())
grids <- data.frame(matrix(ncol = n,nrow = n))
'UP\n'*abs(-3)
?readline
f <- file("stdin")
on.exit(close(f))
FN <- readline(f)
F <- as.numeric(FN[[1]])
N <- as.numeric(FN[[2]])
write(F, stdout())
f <- file("stdin")
on.exit(close(f))
FN <- readline(f)
FN
FN <- readline(f)
FN
f <- file("stdin")
on.exit(close(f))
FN <- readline(f)
FN <- strsplit(FN, " ")
FN
strsplit
?strsplit
FN <- readline(f)
FN
class(FN)
typeof(FN)
strsplit
strsplit(FN, " ")
FN <- readline(f)
strsplit(FN, " ")
FN <- strsplit(FN, " ")
FN[[1]]
FN[[1]][1]
?t
?read.table
f <- file("stdin")
on.exit(close(f))
FN <- readline(f)
write(FN, stdout())
write(n, stdout())
f <- file("stdin")
open(f)
on.exit(close(f))
fn <- suppressWarnings(readline(f))
f <- file("stdin")
open(f)
on.exit(close(f))
fn <- suppressWarnings(readline(f))
f <- fn[[1]][1]
n <- fn[[1]][2]
write(n, stdout())
close(f)
file <- file("stdin")
open(file)
on.exit(close(file))
fn <- suppressWarnings(readline(file))
fn <- strsplit(fn, split = ' ')
f <- fn[[1]][1]
n <- fn[[1]][2]
write(n, stdout())
source('~/GitHub/myhackerrank/predictingHousePrices.R')
rm(list=ls())
file <- file("stdin")
open(file)
on.exit(close(file))
fn <- suppressWarnings(readline(file))
source('~/GitHub/myhackerrank/predictingHousePrices.R')
?suppressWarnings()
file <- file("stdin")
open(file)
fn <- suppressWarnings(readline(file))
open(file)
close(file)
file <- file("stdin")
open(file)
fn <- readline(file)
?readline
close(file)
source('~/GitHub/myhackerrank/predictingHousePrices.R')
rm(list=ls())
file <- file("stdin")
open(file)
fn <- readline(file)
rm(list=ls())
file <- file("stdin")
open(file)
fn <- readline(file)
rm(list=ls())
fil <- file("stdin")
open(fil)
fn <- readline(fil)
fil <- file("stdin")
open(fil)
fn <- readline()
fn <- strsplit(fn, split = ' ')
f <- fn[[1]][1]
n <- fn[[1]][2]
fil
fn
f
n
write(n, stdout())
train <- readLines("training.json", n=-1)
train <- train[c(2 : length(train))]
train <- sprintf("[%s]",paste(train,collapse = ','))
setwd("~/GitHub/myhackerrank/training-and-test")
train <- readLines("training.json", n=-1)
train <- train[c(2 : length(train))]
train <- sprintf("[%s]",paste(train,collapse = ','))
library(rjson)
train <- rjson::fromJSON(train)
head(train)
head(as.data.frame(train))
train[[1]]
as.data.frame(train[[1]])
as.data.frame(train[[1:2]])
as.data.frame(train[[1]])
df  <- as.data.frame(train[[1]])
names(train)
train$
df
columns <- c("Physics", "Chemistry", "PhysicalEducation", "English", "Mathematics", "serial", "ComputerScience", "Hindi", "Biology", "Economics", "Accountancy", "BusinessStudies")
str(train)
train[['Physics']]
train['Physics']
train[[1]]["Physics"]
for col in columns{print(col}
for col in columns{print(col)}
for i in length(columns){print(columns[i])}
for i in 1:length(columns){print(columns[i])}
for(i in 1:length(columns)){print(columns[i])}
for(col in columns)print(col)
for(i in train)print(i)
for(i in train[c(1,2)])print(i)
for(i in train[1])print(i)
for(i in train[1])print(i== Physics)
for(i in train[1])print(i== "Physics")
for(i in train[1])print(i == "Physics")
for(i in train[1])print(i == 3)
for(i in train[[1]])print(i == "physics")
for(i in train[[1]])print(i == "Physics")
for(i in train[[1]])print(i)
train[1]
train[[1]]
train[1] == "physics"
train[1] == "Physics"
train[[1]] == "Physics"
train[[1]][1] == "Physics"
train[[1]]
train[[1]][1]
name(train[[1]][1])
colnames(train[1])
test3 <- list('Row1'=c(a='a',b='b',c='c'), 'Row2'=c(a='d',var2='e',var3='f'))
test3
test3 <- list(c(a='a',b='b',c='c'), c(a='d',var2='e',var3='f'))
test3
unlist
unlist(train[[1]])
train <- lapply(train, unlist)
class(train)
train[[1]]
train[[c(1:3)]]
train[[2]]
head(train)
train[1:5]
train[6]
df <- train[1:10]
df <- as.data.frame(df)
df
df <- train[1:10]
df
df <- train[1:5]
df
as.data.frame(df)
?as.data.frame
df <- train[1:5]
as.data.frame(df, row.names = NULL)
df <- train[1:5]
df
df <- matrix(train[1:5])]
df <- matrix(train[1:5])
df
train[1:5]
matrix(train[1:5])
class(train[[1]])
df <- train[1:5]
as.data.frame(df, col.names = columns)
df
do.call(rbind, df)
df <- train[1:6]
df
do.call(rbind, df)
df$Biology <- NA
?do.call
train <- readLines("training.json", n=-1)
rm(list=ls())
train <- readLines("training.json", n=-1)
train <- train[c(2 : length(train))]
train <- sprintf("[%s]",paste(train,collapse = ','))
library(jsonlite)
train <- jsonlite::fromJSON(train)
train[[1]]
train <- readLines("training.json", n=-1)
rm(list=ls())
train <- readLines("training.json", n=-1)
train <- train[c(2 : length(train))]
train <- sprintf("[%s]",paste(train,collapse = ','))
library(rjson)
train <- rjson::fromJSON(train)
train[[1]]
do.call(rbind, train[[1]])
unlist(train[[1]])
do.call(rbind, unlist(train[[1]])
)
train[[1]]
df <- train[1:5]
df <- train[1:6]
do.call(rbind, df)
do.call(rbind, unlist(df))
do.call(rbind, df)
lapply(df, data.frame)
lapply(df, data.frame, stringsAsFactors = FALSE)
df <- unlist(train)
df[1:6]
df[1:20]
class(df)
head(df)
head(train)
df[1]
df["Physics"]
df[df[i] = "Physics"]
df[df[i] == "Physics"]
df[df[1] == "Physics"]
names(df[1])
names(df)
for(i in df[1:6])print(i)
head(df)
df[1:20]
train[[1]]
df <- lapply(train,unlist)
head(train)
head(df)
df <- sapply(train,unlist)
head(df)
rb <- do.call(rbind, train)
head(rb)
head(df)
train <- rjson::fromJSON(train)
df <- lapply(train, unlist)
train <- readLines("training.json", n=-1)
train <- train[c(2 : length(train))]
train <- sprintf("[%s]",paste(train,collapse = ','))
library(rjson)
train <- rjson::fromJSON(train)
df <- lapply(train, unlist)
head(df)
colclass <- rep("numeric",12)
columns <- c("Physics", "Chemistry", "PhysicalEducation", "English",
"Mathematics", "serial", "ComputerScience", "Hindi", "Biology",
"Economics", "Accountancy", "BusinessStudies")
comby <- read.table(text = '', colClasses = colclass, col.names = columns)
str(comby)
comby[1,] <- NA
str(comby)
length(train)
for(i in train[1;5])print(i)
for(i in train[1:5])print(i)
for(i in comby)print(i)
names(train[[1]]) == colnames(comby)
names(train[[1]][1]) == colnames(comby)
which(names(train[[1]][1]) == colnames(comby))
which(names(train[[1]]) == colnames(comby))
comby$names(train[[1]][1]) <- train[[1]][1]
p <- names(train[[1]][1])
p
comby$p <- train[[1]][1]
comby
comby$p <- NU::
comby$p <- NULL
comby[1,p] <- train[[1]][1]
comby
comby[1,names(train[[1]])] <- train[[1]]
comby
train[[1]]
comby[2,names(train[[6]])] <- train[[6]]
comby
for(i in 1:length(train)){
comby[i,names(train[[i]])] <- train[[i]]
}
train <- readLines("training.json", n=-1)
rm(list=ls())
train <- readLines("training.json", n=-1)
train <- train[c(2 : length(train))]
train <- sprintf("[%s]",paste(train,collapse = ','))
library(rjson)
train <- rjson::fromJSON(train)
columns <- c("Physics", "Chemistry", "PhysicalEducation", "English",
"Mathematics", "serial", "ComputerScience", "Hindi", "Biology",
"Economics", "Accountancy", "BusinessStudies")
colclass <- rep("numeric",12)
comby <- read.table(text = '', colClasses = colclass, col.names = columns)
names(train[[1]])
train[[1]]
df <- head(train)
df
length(df)
for(i in 1:length(df)){
comby[i,names(train[[i]])] <- train[[i]]
}
comby
length(train)
comby <- read.table(text = '', colClasses = colclass, col.names = columns)
for(i in 1:length(train)){
comby[i,names(train[[i]])] <- train[[i]]
}
?t
head(train)
train <- readLines("training.json", n=-1)
train <- train[c(2 : length(train))]
train <- sprintf("[%s]",paste(train,collapse = ','))
library(rjson)
head(train)
head(comby)
?return
listtoDF <- function(train, columns, colclass){
comby <- read.table(text = '', colClasses = colclass, col.names = columns)
for(i in 1:length(train)){
comby[i,names(train[[i]])] <- train[[i]]
}
return(comby)
}
train <- comby
train <- train[-6]
train[is.na(train)] <- 0
train[] <- lapply(train, factor)
test <- readLines("sample-test.in.json", n=-1)
test <- test[c(2 : length(test))]
test <- sprintf("[%s]",paste(test,collapse = ','))
test <- rjson::fromJSON(test)
test <- listtoDF(test,columns, colclass)
head(test)
test <- test[-6]
test[is.na(test)] <- 0
test[] <- lapply(test, factor)
library(rpart)
model <- rpart(Mathematics ~ ., data = train, method = 'class')
out <- predict(model, test, type = 'class')
out <- as.numeric(out)
for(i in 1:length(out)){
write(out[i], stdout())
}
for(i in 1:floor(length(out)/1000)){
write(out[i], stdout())
}
install.packages('purrr')
library(purrr)
?purrr::map
?mAP
?map
install.packages('dplyr')
install.packages('plyr')
trainx <- readLines("training.json", n=-1)
trainx <- trainx[c(2 : length(trainx))]
trainx <- sprintf("[%s]",paste(trainx,collapse = ','))
trainx <- rjson::fromJSON(trainx)
trainx <- lapply(trainx, data.frame)
df <- do.call(plyr::rbind.fill,trainx)
head(df)
trainx <- readLines("training.json", n=-1)
trainx <- trainx[c(2 : length(trainx))]
trainx <- sprintf("[%s]",paste(trainx,collapse = ','))
trainx <- rjson::fromJSON(trainx)
zz <- data.frame(matrix(NA, nrow = length(trainx), ncol = 12))
names(zz) <- columns
for(i in 1:ncol(zz)){
zz[columns[i]] <- map_dbl(x,columns[i],.null=NA)
}
for(i in 1:ncol(zz)){
zz[columns[i]] <- map_dbl(trainx,columns[i],.null=NA)
}
head(zz)
trainx <- readLines("training.json", n=-1)
trainx <- trainx[c(2 : length(trainx))]
trainx <- sprintf("[%s]",paste(trainx,collapse = ','))
trainx <- rjson::fromJSON(trainx)
length(trainx)
zz <- data.frame(matrix(NA, nrow = length(trainx), ncol = 12))
names(zz) <- columns
for(i in 1:ncol(zz)){
zz[columns[i]] <- map_dbl(x,columns[i],.null=NA)
}
for(i in 1:ncol(zz)){
zz[columns[i]] <- map_dbl(trainx,columns[i],.null=NA)
}
head(zz)
?map
train <- listtoDF(train, columns, colclass)
train <- train[-6]
trainx <- readLines("training.json", n=-1)
trainx <- trainx[c(2 : length(trainx))]
trainx <- sprintf("[%s]",paste(trainx,collapse = ','))
trainx <- rjson::fromJSON(trainx)
df <- dplyr::bind_rows(lapply(train, data.frame))
df <- dplyr::bind_rows(lapply(trainx, data.frame))
head(df)
